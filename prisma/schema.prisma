// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

// model Category {
//   id          Int       @id @default(autoincrement())
//   name        String    @unique
//   description String?
//   products    Product[]
// }

// model Product {
//   id          Int        @id @default(autoincrement())
//   authorName  String
//   name        String
//   source      String
//   status      String     @default("In progress")
//   image       String
//   description String?
//   viewCount   Int        @default(0)
//   categoryId  Int
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   categories  Category[]
// }

// model Comment {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   productId Int
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model User {
//   id         Int      @id @default(autoincrement())
//   historyId  Int
//   readdingId Int
//   name       String
//   avatar     String
//   money      Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

enum STATUS {
  PROGRESS = 'PROGRESS',
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model Product {
  id            Int             @id @default(autoincrement())
  categoryId    Int
  name          String
  description   String?
  source        String
  image         String
  status        String          @default("PROGRESS")
  price         Float?
  authorName    String
  viewCount     Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  chapters      Chapter[]
  comments      Comment[]
  rates         Rate[]
  usersProducts UsersProducts[]
  categories    Category[]
  User          User?           @relation(fields: [userId], references: [id])
  userId        Int?
}

model Chapter {
  id            Int       @id @default(autoincrement())
  productId     Int
  chapterName   String
  content       String
  chapterNumber Int
  readings      Reading[]
  Product       Product   @relation(fields: [productId], references: [id])
}

model User {
  id            Int              @id @default(autoincrement())
  name          String
  avatar        String?
  money         Float            @default(0)
  createdAt     DateTime         @default(now())
  comments      Comment[]
  rates         Rate[]
  products      Product[]
  readings      Reading[]
  payments      PaymentHistory[]
  UsersProducts UsersProducts[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  content   String
  createdAt DateTime
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Rate {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  createdAt DateTime
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model UsersProducts {
  id             Int     @id @default(autoincrement())
  productId      Int
  userId         Int
  classification String?
  Product        Product @relation(fields: [productId], references: [id])
  User           User    @relation(fields: [userId], references: [id])
}

model Reading {
  id             Int      @id @default(autoincrement())
  chapterId      Int
  userId         Int
  historyId      Int?
  readingId      Int?
  classification String?
  createdAt      DateTime
  updatedAt      DateTime @updatedAt
  Chapter        Chapter  @relation(fields: [chapterId], references: [id])
  User           User     @relation(fields: [userId], references: [id])
}

model PaymentHistory {
  historyId Int      @id @default(autoincrement())
  chapterId Int?
  Chapter   Chapter  @relation(fields: [chapterId], references: [id])
  userId    Int
  money     Float
  createdAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}
